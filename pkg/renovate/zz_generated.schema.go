// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package renovate

type Config struct {
	// Flags packages that have not been updated within this period as abandoned.
	AbandonmentThreshold *string `json:"abandonmentThreshold,omitempty" yaml:"abandonmentThreshold,omitempty" mapstructure:"abandonmentThreshold,omitempty"`

	// Labels to add to Pull Request.
	AddLabels []string `json:"addLabels,omitempty" yaml:"addLabels,omitempty" mapstructure:"addLabels,omitempty"`

	// Additional string value to be appended to `branchPrefix`.
	AdditionalBranchPrefix string `json:"additionalBranchPrefix,omitempty" yaml:"additionalBranchPrefix,omitempty" mapstructure:"additionalBranchPrefix,omitempty"`

	// Additional reviewers for Pull Requests (in contrast to `reviewers`, this option
	// adds to the existing reviewer list, rather than replacing it).
	AdditionalReviewers []string `json:"additionalReviewers,omitempty" yaml:"additionalReviewers,omitempty" mapstructure:"additionalReviewers,omitempty"`

	// Set this to `true` to allow custom crate registries.
	AllowCustomCrateRegistries bool `json:"allowCustomCrateRegistries,omitempty" yaml:"allowCustomCrateRegistries,omitempty" mapstructure:"allowCustomCrateRegistries,omitempty"`

	// Set this to `true` if repositories are allowed to run install plugins.
	AllowPlugins bool `json:"allowPlugins,omitempty" yaml:"allowPlugins,omitempty" mapstructure:"allowPlugins,omitempty"`

	// Set this to `true` if repositories are allowed to run install scripts.
	AllowScripts bool `json:"allowScripts,omitempty" yaml:"allowScripts,omitempty" mapstructure:"allowScripts,omitempty"`

	// A list of regular expressions that decide which commands are allowed in
	// post-upgrade tasks.
	AllowedCommands []string `json:"allowedCommands,omitempty" yaml:"allowedCommands,omitempty" mapstructure:"allowedCommands,omitempty"`

	// List of allowed patterns for environment variable names in repository env
	// config.
	AllowedEnv []string `json:"allowedEnv,omitempty" yaml:"allowedEnv,omitempty" mapstructure:"allowedEnv,omitempty"`

	// List of allowed patterns for header names in repository hostRules config.
	AllowedHeaders []string `json:"allowedHeaders,omitempty" yaml:"allowedHeaders,omitempty" mapstructure:"allowedHeaders,omitempty"`

	// Assign reviewers and assignees even if the PR is to be automerged.
	AssignAutomerge bool `json:"assignAutomerge,omitempty" yaml:"assignAutomerge,omitempty" mapstructure:"assignAutomerge,omitempty"`

	// Assignees for Pull Request (either username or email address depending on the
	// platform).
	Assignees []string `json:"assignees,omitempty" yaml:"assignees,omitempty" mapstructure:"assignees,omitempty"`

	// Determine assignees based on configured code owners and changes in PR.
	AssigneesFromCodeOwners bool `json:"assigneesFromCodeOwners,omitempty" yaml:"assigneesFromCodeOwners,omitempty" mapstructure:"assigneesFromCodeOwners,omitempty"`

	// Take a random sample of given size from `assignees`.
	AssigneesSampleSize *int `json:"assigneesSampleSize,omitempty" yaml:"assigneesSampleSize,omitempty" mapstructure:"assigneesSampleSize,omitempty"`

	// Set to `true` to automatically approve PRs.
	AutoApprove bool `json:"autoApprove,omitempty" yaml:"autoApprove,omitempty" mapstructure:"autoApprove,omitempty"`

	// Control whether replacement regular expressions are global matches or only the
	// first match.
	AutoReplaceGlobalMatch bool `json:"autoReplaceGlobalMatch,omitempty" yaml:"autoReplaceGlobalMatch,omitempty" mapstructure:"autoReplaceGlobalMatch,omitempty"`

	// Autodiscover all repositories.
	Autodiscover bool `json:"autodiscover,omitempty" yaml:"autodiscover,omitempty" mapstructure:"autodiscover,omitempty"`

	// Filter the list of autodiscovered repositories.
	AutodiscoverFilter []interface{} `json:"autodiscoverFilter,omitempty" yaml:"autodiscoverFilter,omitempty" mapstructure:"autodiscoverFilter,omitempty"`

	// Filter the list of autodiscovered repositories by namespaces.
	AutodiscoverNamespaces []string `json:"autodiscoverNamespaces,omitempty" yaml:"autodiscoverNamespaces,omitempty" mapstructure:"autodiscoverNamespaces,omitempty"`

	// Filter the list of autodiscovered repositories by project names.
	AutodiscoverProjects []string `json:"autodiscoverProjects,omitempty" yaml:"autodiscoverProjects,omitempty" mapstructure:"autodiscoverProjects,omitempty"`

	// The order method for autodiscover server side repository search.
	AutodiscoverRepoOrder *ConfigAutodiscoverRepoOrder `json:"autodiscoverRepoOrder,omitempty" yaml:"autodiscoverRepoOrder,omitempty" mapstructure:"autodiscoverRepoOrder,omitempty"`

	// The sort method for autodiscover server side repository search.
	AutodiscoverRepoSort *ConfigAutodiscoverRepoSort `json:"autodiscoverRepoSort,omitempty" yaml:"autodiscoverRepoSort,omitempty" mapstructure:"autodiscoverRepoSort,omitempty"`

	// Filter the list of autodiscovered repositories by topics.
	AutodiscoverTopics []string `json:"autodiscoverTopics,omitempty" yaml:"autodiscoverTopics,omitempty" mapstructure:"autodiscoverTopics,omitempty"`

	// Whether to automerge branches/PRs automatically, without human intervention.
	Automerge bool `json:"automerge,omitempty" yaml:"automerge,omitempty" mapstructure:"automerge,omitempty"`

	// PR comment to add to trigger automerge. Only used if
	// `automergeType=pr-comment`.
	AutomergeComment string `json:"automergeComment,omitempty" yaml:"automergeComment,omitempty" mapstructure:"automergeComment,omitempty"`

	// Limit automerge to these times of day or week.
	AutomergeSchedule interface{} `json:"automergeSchedule,omitempty" yaml:"automergeSchedule,omitempty" mapstructure:"automergeSchedule,omitempty"`

	// The merge strategy to use when automerging PRs. Used only if
	// `automergeType=pr`.
	AutomergeStrategy ConfigAutomergeStrategy `json:"automergeStrategy,omitempty" yaml:"automergeStrategy,omitempty" mapstructure:"automergeStrategy,omitempty"`

	// How to automerge, if enabled.
	AutomergeType ConfigAutomergeType `json:"automergeType,omitempty" yaml:"automergeType,omitempty" mapstructure:"automergeType,omitempty"`

	// The id of an existing work item on Azure Boards to link to each PR.
	AzureWorkItemId int `json:"azureWorkItemId,omitempty" yaml:"azureWorkItemId,omitempty" mapstructure:"azureWorkItemId,omitempty"`

	// List of one or more custom base branches defined as exact strings and/or via
	// regex expressions.
	BaseBranches []string `json:"baseBranches,omitempty" yaml:"baseBranches,omitempty" mapstructure:"baseBranches,omitempty"`

	// The base directory for Renovate to store local files, including repository
	// files and cache. If left empty, Renovate will create its own temporary
	// directory to use.
	BaseDir *string `json:"baseDir,omitempty" yaml:"baseDir,omitempty" mapstructure:"baseDir,omitempty"`

	// The PR tasks will be automatically completed after the PR is raised.
	BbAutoResolvePrTasks bool `json:"bbAutoResolvePrTasks,omitempty" yaml:"bbAutoResolvePrTasks,omitempty" mapstructure:"bbAutoResolvePrTasks,omitempty"`

	// Use the default reviewers (Bitbucket only).
	BbUseDefaultReviewers bool `json:"bbUseDefaultReviewers,omitempty" yaml:"bbUseDefaultReviewers,omitempty" mapstructure:"bbUseDefaultReviewers,omitempty"`

	// Use the repository's [development
	// branch](https://support.atlassian.com/bitbucket-cloud/docs/branch-a-repository/#The-branching-model)
	// as the repository's default branch.
	BbUseDevelopmentBranch bool `json:"bbUseDevelopmentBranch,omitempty" yaml:"bbUseDevelopmentBranch,omitempty" mapstructure:"bbUseDevelopmentBranch,omitempty"`

	// Controls how third-party tools like npm or Gradle are called: directly, via
	// Docker sidecar containers, or via dynamic install.
	BinarySource ConfigBinarySource `json:"binarySource,omitempty" yaml:"binarySource,omitempty" mapstructure:"binarySource,omitempty"`

	// Limit to a maximum of x concurrent branches. 0 means no limit, `null` (default)
	// inherits value from `prConcurrentLimit`.
	BranchConcurrentLimit *int `json:"branchConcurrentLimit,omitempty" yaml:"branchConcurrentLimit,omitempty" mapstructure:"branchConcurrentLimit,omitempty"`

	// Branch name template.
	BranchName string `json:"branchName,omitempty" yaml:"branchName,omitempty" mapstructure:"branchName,omitempty"`

	// Whether to be strict about the use of special characters within the branch
	// name.
	BranchNameStrict bool `json:"branchNameStrict,omitempty" yaml:"branchNameStrict,omitempty" mapstructure:"branchNameStrict,omitempty"`

	// Prefix to use for all branch names.
	BranchPrefix string `json:"branchPrefix,omitempty" yaml:"branchPrefix,omitempty" mapstructure:"branchPrefix,omitempty"`

	// Old branchPrefix value to check for existing PRs.
	BranchPrefixOld string `json:"branchPrefixOld,omitempty" yaml:"branchPrefixOld,omitempty" mapstructure:"branchPrefixOld,omitempty"`

	// Branch topic.
	BranchTopic string `json:"branchTopic,omitempty" yaml:"branchTopic,omitempty" mapstructure:"branchTopic,omitempty"`

	// Bump the version in the package file being updated.
	BumpVersion *ConfigBumpVersion `json:"bumpVersion,omitempty" yaml:"bumpVersion,omitempty" mapstructure:"bumpVersion,omitempty"`

	// A list of bumpVersion config options to bump generic version numbers.
	BumpVersions []interface{} `json:"bumpVersions,omitempty" yaml:"bumpVersions,omitempty" mapstructure:"bumpVersions,omitempty"`

	// The directory where Renovate stores its cache. If left empty, Renovate creates
	// a subdirectory within the `baseDir`.
	CacheDir *string `json:"cacheDir,omitempty" yaml:"cacheDir,omitempty" mapstructure:"cacheDir,omitempty"`

	// Maximum duration in minutes to keep datasource cache entries.
	CacheHardTtlMinutes int `json:"cacheHardTtlMinutes,omitempty" yaml:"cacheHardTtlMinutes,omitempty" mapstructure:"cacheHardTtlMinutes,omitempty"`

	// Cache private packages in the datasource cache. This is useful for self-hosted
	// setups
	CachePrivatePackages bool `json:"cachePrivatePackages,omitempty" yaml:"cachePrivatePackages,omitempty" mapstructure:"cachePrivatePackages,omitempty"`

	// A list of branch names to mark for creation or rebasing as if it was selected
	// in the Dependency Dashboard issue.
	CheckedBranches []string `json:"checkedBranches,omitempty" yaml:"checkedBranches,omitempty" mapstructure:"checkedBranches,omitempty"`

	// Set to `true` to initialize submodules during repository clone.
	CloneSubmodules bool `json:"cloneSubmodules,omitempty" yaml:"cloneSubmodules,omitempty" mapstructure:"cloneSubmodules,omitempty"`

	// List of submodules names or patterns to clone when cloneSubmodules=true.
	CloneSubmodulesFilter []string `json:"cloneSubmodulesFilter,omitempty" yaml:"cloneSubmodulesFilter,omitempty" mapstructure:"cloneSubmodulesFilter,omitempty"`

	// Commit message body template. Will be appended to commit message, separated by
	// two line returns.
	CommitBody *string `json:"commitBody,omitempty" yaml:"commitBody,omitempty" mapstructure:"commitBody,omitempty"`

	// If enabled, append a table in the commit message body describing all updates in
	// the commit.
	CommitBodyTable bool `json:"commitBodyTable,omitempty" yaml:"commitBodyTable,omitempty" mapstructure:"commitBodyTable,omitempty"`

	// Message to use for commit messages and pull request titles.
	CommitMessage string `json:"commitMessage,omitempty" yaml:"commitMessage,omitempty" mapstructure:"commitMessage,omitempty"`

	// Action verb to use in commit messages and PR titles.
	CommitMessageAction string `json:"commitMessageAction,omitempty" yaml:"commitMessageAction,omitempty" mapstructure:"commitMessageAction,omitempty"`

	// Extra description used after the commit message topic - typically the version.
	CommitMessageExtra string `json:"commitMessageExtra,omitempty" yaml:"commitMessageExtra,omitempty" mapstructure:"commitMessageExtra,omitempty"`

	// Lowercase PR- and commit titles.
	CommitMessageLowerCase ConfigCommitMessageLowerCase `json:"commitMessageLowerCase,omitempty" yaml:"commitMessageLowerCase,omitempty" mapstructure:"commitMessageLowerCase,omitempty"`

	// Prefix to add to start of commit messages and PR titles. Uses a semantic prefix
	// if `semanticCommits` is enabled.
	CommitMessagePrefix *string `json:"commitMessagePrefix,omitempty" yaml:"commitMessagePrefix,omitempty" mapstructure:"commitMessagePrefix,omitempty"`

	// Suffix to add to end of commit messages and PR titles.
	CommitMessageSuffix *string `json:"commitMessageSuffix,omitempty" yaml:"commitMessageSuffix,omitempty" mapstructure:"commitMessageSuffix,omitempty"`

	// The upgrade topic/noun used in commit messages and PR titles.
	CommitMessageTopic string `json:"commitMessageTopic,omitempty" yaml:"commitMessageTopic,omitempty" mapstructure:"commitMessageTopic,omitempty"`

	// Configure use of `--ignore-platform-reqs` or `--ignore-platform-req` for the
	// Composer package manager.
	ComposerIgnorePlatformReqs []string `json:"composerIgnorePlatformReqs,omitempty" yaml:"composerIgnorePlatformReqs,omitempty" mapstructure:"composerIgnorePlatformReqs,omitempty"`

	// If enabled, issues created by Renovate are set as confidential.
	Confidential bool `json:"confidential,omitempty" yaml:"confidential,omitempty" mapstructure:"confidential,omitempty"`

	// Enable this to get config migration PRs when needed.
	ConfigMigration bool `json:"configMigration,omitempty" yaml:"configMigration,omitempty" mapstructure:"configMigration,omitempty"`

	// Set this to `true` to make Renovate reuse/reopen an existing closed Config
	// Warning issue, instead of opening a new one each time.
	ConfigWarningReuseIssue bool `json:"configWarningReuseIssue,omitempty" yaml:"configWarningReuseIssue,omitempty" mapstructure:"configWarningReuseIssue,omitempty"`

	// Configuration object to define language or manager version constraints.
	Constraints ConfigConstraints `json:"constraints,omitempty" yaml:"constraints,omitempty" mapstructure:"constraints,omitempty"`

	// Perform release filtering based on language constraints.
	ConstraintsFiltering ConfigConstraintsFiltering `json:"constraintsFiltering,omitempty" yaml:"constraintsFiltering,omitempty" mapstructure:"constraintsFiltering,omitempty"`

	// The directory where Renovate stores its containerbase cache. If left empty,
	// Renovate creates a subdirectory within the `cacheDir`.
	ContainerbaseDir *string `json:"containerbaseDir,omitempty" yaml:"containerbaseDir,omitempty" mapstructure:"containerbaseDir,omitempty"`

	// Custom managers using regex matching.
	CustomManagers []interface{} `json:"customManagers,omitempty" yaml:"customManagers,omitempty" mapstructure:"customManagers,omitempty"`

	// Customize sections in the Dependency Dashboard issue.
	CustomizeDashboard ConfigCustomizeDashboard `json:"customizeDashboard,omitempty" yaml:"customizeDashboard,omitempty" mapstructure:"customizeDashboard,omitempty"`

	// List of registry URLs to use as the default for a datasource.
	DefaultRegistryUrls []string `json:"defaultRegistryUrls,omitempty" yaml:"defaultRegistryUrls,omitempty" mapstructure:"defaultRegistryUrls,omitempty"`

	// If set to `true`, Renovate tries to delete the self-hosted config file after
	// reading it.
	DeleteConfigFile bool `json:"deleteConfigFile,omitempty" yaml:"deleteConfigFile,omitempty" mapstructure:"deleteConfigFile,omitempty"`

	// Whether to create a "Dependency Dashboard" issue in the repository.
	DependencyDashboard bool `json:"dependencyDashboard,omitempty" yaml:"dependencyDashboard,omitempty" mapstructure:"dependencyDashboard,omitempty"`

	// Controls if updates need manual approval from the Dependency Dashboard issue
	// before PRs are created.
	DependencyDashboardApproval bool `json:"dependencyDashboardApproval,omitempty" yaml:"dependencyDashboardApproval,omitempty" mapstructure:"dependencyDashboardApproval,omitempty"`

	// Set to `true` to let Renovate close the Dependency Dashboard issue if there are
	// no more updates.
	DependencyDashboardAutoclose bool `json:"dependencyDashboardAutoclose,omitempty" yaml:"dependencyDashboardAutoclose,omitempty" mapstructure:"dependencyDashboardAutoclose,omitempty"`

	// Any text added here will be placed last in the Dependency Dashboard issue body,
	// with a divider separator before it.
	DependencyDashboardFooter *string `json:"dependencyDashboardFooter,omitempty" yaml:"dependencyDashboardFooter,omitempty" mapstructure:"dependencyDashboardFooter,omitempty"`

	// Any text added here will be placed first in the Dependency Dashboard issue
	// body.
	DependencyDashboardHeader string `json:"dependencyDashboardHeader,omitempty" yaml:"dependencyDashboardHeader,omitempty" mapstructure:"dependencyDashboardHeader,omitempty"`

	// These labels will always be applied on the Dependency Dashboard issue, even
	// when they have been removed manually.
	DependencyDashboardLabels []string `json:"dependencyDashboardLabels,omitempty" yaml:"dependencyDashboardLabels,omitempty" mapstructure:"dependencyDashboardLabels,omitempty"`

	// Control if the Dependency Dashboard issue lists CVEs supplied by
	// [osv.dev](https://osv.dev).
	DependencyDashboardOSVVulnerabilitySummary ConfigDependencyDashboardOSVVulnerabilitySummary `json:"dependencyDashboardOSVVulnerabilitySummary,omitempty" yaml:"dependencyDashboardOSVVulnerabilitySummary,omitempty" mapstructure:"dependencyDashboardOSVVulnerabilitySummary,omitempty"`

	// Controls whether abandoned packages are reported in the dependency dashboard.
	DependencyDashboardReportAbandonment bool `json:"dependencyDashboardReportAbandonment,omitempty" yaml:"dependencyDashboardReportAbandonment,omitempty" mapstructure:"dependencyDashboardReportAbandonment,omitempty"`

	// Title for the Dependency Dashboard issue.
	DependencyDashboardTitle string `json:"dependencyDashboardTitle,omitempty" yaml:"dependencyDashboardTitle,omitempty" mapstructure:"dependencyDashboardTitle,omitempty"`

	// Plain text description for a config or preset.
	Description interface{} `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// If `true`, Renovate tries to detect global manager configuration from the file
	// system.
	DetectGlobalManagerConfig bool `json:"detectGlobalManagerConfig,omitempty" yaml:"detectGlobalManagerConfig,omitempty" mapstructure:"detectGlobalManagerConfig,omitempty"`

	// If `true`, Renovate tries to detect host rules from environment variables.
	DetectHostRulesFromEnv bool `json:"detectHostRulesFromEnv,omitempty" yaml:"detectHostRulesFromEnv,omitempty" mapstructure:"detectHostRulesFromEnv,omitempty"`

	// Change this value to add a prefix to the Renovate Docker sidecar container
	// names and labels.
	DockerChildPrefix string `json:"dockerChildPrefix,omitempty" yaml:"dockerChildPrefix,omitempty" mapstructure:"dockerChildPrefix,omitempty"`

	// Pass CLI flags to `docker run` command when `binarySource=docker`.
	DockerCliOptions *string `json:"dockerCliOptions,omitempty" yaml:"dockerCliOptions,omitempty" mapstructure:"dockerCliOptions,omitempty"`

	// By default, Renovate fetches up to 20 pages of Docker tags from registries. But
	// you can set your own limit with this config option.
	DockerMaxPages int `json:"dockerMaxPages,omitempty" yaml:"dockerMaxPages,omitempty" mapstructure:"dockerMaxPages,omitempty"`

	// Change this value to override the default Renovate sidecar image.
	DockerSidecarImage string `json:"dockerSidecarImage,omitempty" yaml:"dockerSidecarImage,omitempty" mapstructure:"dockerSidecarImage,omitempty"`

	// Set the `UID` and `GID` for Docker-based binaries if you use
	// `binarySource=docker`.
	DockerUser *string `json:"dockerUser,omitempty" yaml:"dockerUser,omitempty" mapstructure:"dockerUser,omitempty"`

	// If set to `true` then Renovate creates draft PRs, instead of normal status PRs.
	DraftPR bool `json:"draftPR,omitempty" yaml:"draftPR,omitempty" mapstructure:"draftPR,omitempty"`

	// If enabled, perform a dry run by logging messages instead of
	// creating/updating/deleting branches and PRs.
	DryRun *ConfigDryRun `json:"dryRun,omitempty" yaml:"dryRun,omitempty" mapstructure:"dryRun,omitempty"`

	// Enable or disable Renovate bot.
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// A list of package managers to enable. Only managers on the list are enabled.
	EnabledManagers []string `json:"enabledManagers,omitempty" yaml:"enabledManagers,omitempty" mapstructure:"enabledManagers,omitempty"`

	// Warning text to use if encrypted config is found.
	EncryptedWarning *string `json:"encryptedWarning,omitempty" yaml:"encryptedWarning,omitempty" mapstructure:"encryptedWarning,omitempty"`

	// Custom endpoint to use.
	Endpoint *string `json:"endpoint,omitempty" yaml:"endpoint,omitempty" mapstructure:"endpoint,omitempty"`

	// A file matching any of these glob patterns will not be committed, even if the
	// file has been updated.
	ExcludeCommitPaths []string `json:"excludeCommitPaths,omitempty" yaml:"excludeCommitPaths,omitempty" mapstructure:"excludeCommitPaths,omitempty"`

	// Default execution timeout in minutes for child processes Renovate creates.
	ExecutionTimeout int `json:"executionTimeout,omitempty" yaml:"executionTimeout,omitempty" mapstructure:"executionTimeout,omitempty"`

	// Expand the configured code owner groups into a full list of group members.
	ExpandCodeOwnersGroups bool `json:"expandCodeOwnersGroups,omitempty" yaml:"expandCodeOwnersGroups,omitempty" mapstructure:"expandCodeOwnersGroups,omitempty"`

	// Set this to `true` to allow passing of all environment variables to package
	// managers.
	ExposeAllEnv bool `json:"exposeAllEnv,omitempty" yaml:"exposeAllEnv,omitempty" mapstructure:"exposeAllEnv,omitempty"`

	// Configuration presets to use or extend.
	Extends interface{} `json:"extends,omitempty" yaml:"extends,omitempty" mapstructure:"extends,omitempty"`

	// A regex (`re2`) to extract a version from a datasource's raw version string.
	ExtractVersion *string `json:"extractVersion,omitempty" yaml:"extractVersion,omitempty" mapstructure:"extractVersion,omitempty"`

	// Controls if and when changelogs/release notes are fetched.
	FetchChangeLogs ConfigFetchChangeLogs `json:"fetchChangeLogs,omitempty" yaml:"fetchChangeLogs,omitempty" mapstructure:"fetchChangeLogs,omitempty"`

	// Filter reviewers and assignees based on their availability.
	FilterUnavailableUsers bool `json:"filterUnavailableUsers,omitempty" yaml:"filterUnavailableUsers,omitempty" mapstructure:"filterUnavailableUsers,omitempty"`

	// If defined, packages will follow this release tag exactly.
	FollowTag *string `json:"followTag,omitempty" yaml:"followTag,omitempty" mapstructure:"followTag,omitempty"`

	// Decides if CLI configuration options are moved to the `force` config section.
	ForceCli bool `json:"forceCli,omitempty" yaml:"forceCli,omitempty" mapstructure:"forceCli,omitempty"`

	// Whether to create forks as needed at runtime when running in "fork mode".
	ForkCreation bool `json:"forkCreation,omitempty" yaml:"forkCreation,omitempty" mapstructure:"forkCreation,omitempty"`

	// Disallow maintainers to push to Renovate pull requests when running in fork
	// mode.
	ForkModeDisallowMaintainerEdits bool `json:"forkModeDisallowMaintainerEdits,omitempty" yaml:"forkModeDisallowMaintainerEdits,omitempty" mapstructure:"forkModeDisallowMaintainerEdits,omitempty"`

	// The preferred organization to create or find forked repositories, when in fork
	// mode.
	ForkOrg *string `json:"forkOrg,omitempty" yaml:"forkOrg,omitempty" mapstructure:"forkOrg,omitempty"`

	// Whether to process forked repositories. By default, all forked repositories are
	// skipped when in `autodiscover` mode.
	ForkProcessing ConfigForkProcessing `json:"forkProcessing,omitempty" yaml:"forkProcessing,omitempty" mapstructure:"forkProcessing,omitempty"`

	// Set a personal access token here to enable "fork mode".
	ForkToken *string `json:"forkToken,omitempty" yaml:"forkToken,omitempty" mapstructure:"forkToken,omitempty"`

	// Author to use for Git commits. Must conform to
	// [RFC5322](https://datatracker.ietf.org/doc/html/rfc5322).
	GitAuthor *string `json:"gitAuthor,omitempty" yaml:"gitAuthor,omitempty" mapstructure:"gitAuthor,omitempty"`

	// Git authors which are ignored by Renovate. Must conform to
	// [RFC5322](https://datatracker.ietf.org/doc/html/rfc5322).
	GitIgnoredAuthors []string `json:"gitIgnoredAuthors,omitempty" yaml:"gitIgnoredAuthors,omitempty" mapstructure:"gitIgnoredAuthors,omitempty"`

	// Ignore approval rules for MRs created by Renovate, which is useful for
	// automerge.
	GitLabIgnoreApprovals bool `json:"gitLabIgnoreApprovals,omitempty" yaml:"gitLabIgnoreApprovals,omitempty" mapstructure:"gitLabIgnoreApprovals,omitempty"`

	// Which Git commands will be run with the `--no-verify` option.
	GitNoVerify interface{} `json:"gitNoVerify,omitempty" yaml:"gitNoVerify,omitempty" mapstructure:"gitNoVerify,omitempty"`

	// PGP key to use for signing Git commits.
	GitPrivateKey *string `json:"gitPrivateKey,omitempty" yaml:"gitPrivateKey,omitempty" mapstructure:"gitPrivateKey,omitempty"`

	// Configure the timeout with a number of milliseconds to wait for a Git task.
	GitTimeout int `json:"gitTimeout,omitempty" yaml:"gitTimeout,omitempty" mapstructure:"gitTimeout,omitempty"`

	// Overrides the default resolution for Git remote, e.g. to switch GitLab from
	// HTTPS to SSH-based.
	GitUrl ConfigGitUrl `json:"gitUrl,omitempty" yaml:"gitUrl,omitempty" mapstructure:"gitUrl,omitempty"`

	// Display warnings about GitHub token not being set.
	GithubTokenWarn bool `json:"githubTokenWarn,omitempty" yaml:"githubTokenWarn,omitempty" mapstructure:"githubTokenWarn,omitempty"`

	// Configuration presets to use or extend for a self-hosted config.
	GlobalExtends []string `json:"globalExtends,omitempty" yaml:"globalExtends,omitempty" mapstructure:"globalExtends,omitempty"`

	// Directory pattern to run `go get` on.
	GoGetDirs []string `json:"goGetDirs,omitempty" yaml:"goGetDirs,omitempty" mapstructure:"goGetDirs,omitempty"`

	// Human understandable name for the dependency group.
	GroupName *string `json:"groupName,omitempty" yaml:"groupName,omitempty" mapstructure:"groupName,omitempty"`

	// Slug to use for group (e.g. in branch name). Slug is calculated from
	// `groupName` if `null`.
	GroupSlug *string `json:"groupSlug,omitempty" yaml:"groupSlug,omitempty" mapstructure:"groupSlug,omitempty"`

	// If enabled, branch names will use a hashing function to ensure each branch has
	// that length.
	HashedBranchLength *int `json:"hashedBranchLength,omitempty" yaml:"hashedBranchLength,omitempty" mapstructure:"hashedBranchLength,omitempty"`

	// Host rules/configuration including credentials.
	HostRules []interface{} `json:"hostRules,omitempty" yaml:"hostRules,omitempty" mapstructure:"hostRules,omitempty"`

	// Maximum duration in days to keep HTTP cache entries.
	HttpCacheTtlDays int `json:"httpCacheTtlDays,omitempty" yaml:"httpCacheTtlDays,omitempty" mapstructure:"httpCacheTtlDays,omitempty"`

	// Avoid upgrading from a non-deprecated version to a deprecated one.
	IgnoreDeprecated bool `json:"ignoreDeprecated,omitempty" yaml:"ignoreDeprecated,omitempty" mapstructure:"ignoreDeprecated,omitempty"`

	// Dependencies to ignore.
	IgnoreDeps []string `json:"ignoreDeps,omitempty" yaml:"ignoreDeps,omitempty" mapstructure:"ignoreDeps,omitempty"`

	// Skip any package file whose path matches one of these. Can be a string or glob
	// pattern.
	IgnorePaths []string `json:"ignorePaths,omitempty" yaml:"ignorePaths,omitempty" mapstructure:"ignorePaths,omitempty"`

	// Set this to `true` if `allowPlugins=true` but you wish to skip running plugins
	// when updating lock files.
	IgnorePlugins bool `json:"ignorePlugins,omitempty" yaml:"ignorePlugins,omitempty" mapstructure:"ignorePlugins,omitempty"`

	// Set to `true` to fetch the entire list of PRs instead of only those authored by
	// the Renovate user.
	IgnorePrAuthor bool `json:"ignorePrAuthor,omitempty" yaml:"ignorePrAuthor,omitempty" mapstructure:"ignorePrAuthor,omitempty"`

	// A list of presets to ignore, including any that are nested inside an `extends`
	// array.
	IgnorePresets interface{} `json:"ignorePresets,omitempty" yaml:"ignorePresets,omitempty" mapstructure:"ignorePresets,omitempty"`

	// Reviewers to be ignored in PR reviewers presence (either username or email
	// address depending on the platform).
	IgnoreReviewers []string `json:"ignoreReviewers,omitempty" yaml:"ignoreReviewers,omitempty" mapstructure:"ignoreReviewers,omitempty"`

	// Set this to `false` if `allowScripts=true` and you wish to run scripts when
	// updating lock files.
	IgnoreScripts bool `json:"ignoreScripts,omitempty" yaml:"ignoreScripts,omitempty" mapstructure:"ignoreScripts,omitempty"`

	// Set to `true` to enable automerging without tests.
	IgnoreTests bool `json:"ignoreTests,omitempty" yaml:"ignoreTests,omitempty" mapstructure:"ignoreTests,omitempty"`

	// Ignore versions with unstable SemVer.
	IgnoreUnstable bool `json:"ignoreUnstable,omitempty" yaml:"ignoreUnstable,omitempty" mapstructure:"ignoreUnstable,omitempty"`

	// Whether to process repositories that are mirrors. By default, repositories that
	// are mirrors are skipped.
	IncludeMirrors bool `json:"includeMirrors,omitempty" yaml:"includeMirrors,omitempty" mapstructure:"includeMirrors,omitempty"`

	// Include package files only within these defined paths.
	IncludePaths []string `json:"includePaths,omitempty" yaml:"includePaths,omitempty" mapstructure:"includePaths,omitempty"`

	// If `true`, Renovate will inherit configuration from the `inheritConfigFileName`
	// file in `inheritConfigRepoName`.
	InheritConfig bool `json:"inheritConfig,omitempty" yaml:"inheritConfig,omitempty" mapstructure:"inheritConfig,omitempty"`

	// Renovate will look for this config file name in the `inheritConfigRepoName`.
	InheritConfigFileName string `json:"inheritConfigFileName,omitempty" yaml:"inheritConfigFileName,omitempty" mapstructure:"inheritConfigFileName,omitempty"`

	// Renovate will look in this repo for the `inheritConfigFileName`.
	InheritConfigRepoName string `json:"inheritConfigRepoName,omitempty" yaml:"inheritConfigRepoName,omitempty" mapstructure:"inheritConfigRepoName,omitempty"`

	// If `true`, any `inheritedConfig` fetch error will result in an aborted run.
	InheritConfigStrict bool `json:"inheritConfigStrict,omitempty" yaml:"inheritConfigStrict,omitempty" mapstructure:"inheritConfigStrict,omitempty"`

	// Whether to consider passing internal checks such as `minimumReleaseAge` when
	// determining branch status.
	InternalChecksAsSuccess bool `json:"internalChecksAsSuccess,omitempty" yaml:"internalChecksAsSuccess,omitempty" mapstructure:"internalChecksAsSuccess,omitempty"`

	// When and how to filter based on internal checks.
	InternalChecksFilter ConfigInternalChecksFilter `json:"internalChecksFilter,omitempty" yaml:"internalChecksFilter,omitempty" mapstructure:"internalChecksFilter,omitempty"`

	// If set, users can add this label to PRs to request they be kept updated with
	// the base branch.
	KeepUpdatedLabel *string `json:"keepUpdatedLabel,omitempty" yaml:"keepUpdatedLabel,omitempty" mapstructure:"keepUpdatedLabel,omitempty"`

	// Labels to set in Pull Request.
	Labels []string `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// Add a global or per-repo log context to each log entry.
	LogContext *string `json:"logContext,omitempty" yaml:"logContext,omitempty" mapstructure:"logContext,omitempty"`

	// Remap log levels to different levels.
	LogLevelRemap []interface{} `json:"logLevelRemap,omitempty" yaml:"logLevelRemap,omitempty" mapstructure:"logLevelRemap,omitempty"`

	// If set, Renovate will query the merge-confidence JSON API only for datasources
	// that are part of this list.
	MergeConfidenceDatasources []ConfigMergeConfidenceDatasourcesElem `json:"mergeConfidenceDatasources,omitempty" yaml:"mergeConfidenceDatasources,omitempty" mapstructure:"mergeConfidenceDatasources,omitempty"`

	// If set, Renovate will query this API for Merge Confidence data.
	MergeConfidenceEndpoint string `json:"mergeConfidenceEndpoint,omitempty" yaml:"mergeConfidenceEndpoint,omitempty" mapstructure:"mergeConfidenceEndpoint,omitempty"`

	// The number of a milestone. If set, the milestone will be set when Renovate
	// creates the PR.
	Milestone *int `json:"milestone,omitempty" yaml:"milestone,omitempty" mapstructure:"milestone,omitempty"`

	// Time required before a new release is considered stable.
	MinimumReleaseAge *string `json:"minimumReleaseAge,omitempty" yaml:"minimumReleaseAge,omitempty" mapstructure:"minimumReleaseAge,omitempty"`

	// Mode of operation.
	Mode ConfigMode `json:"mode,omitempty" yaml:"mode,omitempty" mapstructure:"mode,omitempty"`

	// npm token used to authenticate with the default registry.
	NpmToken *string `json:"npmToken,omitempty" yaml:"npmToken,omitempty" mapstructure:"npmToken,omitempty"`

	// String copy of `.npmrc` file. Use `\n` instead of line breaks.
	Npmrc *string `json:"npmrc,omitempty" yaml:"npmrc,omitempty" mapstructure:"npmrc,omitempty"`

	// Whether to merge `config.npmrc` with repo `.npmrc` content if both are found.
	NpmrcMerge bool `json:"npmrcMerge,omitempty" yaml:"npmrcMerge,omitempty" mapstructure:"npmrcMerge,omitempty"`

	// Require a Configuration PR first.
	Onboarding *bool `json:"onboarding,omitempty" yaml:"onboarding,omitempty" mapstructure:"onboarding,omitempty"`

	// Change this value to override the default onboarding branch name.
	OnboardingBranch string `json:"onboardingBranch,omitempty" yaml:"onboardingBranch,omitempty" mapstructure:"onboardingBranch,omitempty"`

	// Change this value to override the default onboarding commit message.
	OnboardingCommitMessage *string `json:"onboardingCommitMessage,omitempty" yaml:"onboardingCommitMessage,omitempty" mapstructure:"onboardingCommitMessage,omitempty"`

	// Change this value to override the default onboarding config file name.
	OnboardingConfigFileName string `json:"onboardingConfigFileName,omitempty" yaml:"onboardingConfigFileName,omitempty" mapstructure:"onboardingConfigFileName,omitempty"`

	// Onboard the repository even if no dependencies are found.
	OnboardingNoDeps ConfigOnboardingNoDeps `json:"onboardingNoDeps,omitempty" yaml:"onboardingNoDeps,omitempty" mapstructure:"onboardingNoDeps,omitempty"`

	// Change this value to override the default onboarding PR title.
	OnboardingPrTitle string `json:"onboardingPrTitle,omitempty" yaml:"onboardingPrTitle,omitempty" mapstructure:"onboardingPrTitle,omitempty"`

	// Set to enable rebase/retry markdown checkbox for onboarding PRs.
	OnboardingRebaseCheckbox bool `json:"onboardingRebaseCheckbox,omitempty" yaml:"onboardingRebaseCheckbox,omitempty" mapstructure:"onboardingRebaseCheckbox,omitempty"`

	// Set to `true` to perform a check for disabled config prior to cloning.
	OptimizeForDisabled bool `json:"optimizeForDisabled,omitempty" yaml:"optimizeForDisabled,omitempty" mapstructure:"optimizeForDisabled,omitempty"`

	// Use vulnerability alerts from `osv.dev`.
	OsvVulnerabilityAlerts bool `json:"osvVulnerabilityAlerts,omitempty" yaml:"osvVulnerabilityAlerts,omitempty" mapstructure:"osvVulnerabilityAlerts,omitempty"`

	// Rules for matching packages.
	PackageRules []interface{} `json:"packageRules,omitempty" yaml:"packageRules,omitempty" mapstructure:"packageRules,omitempty"`

	// Password for authentication.
	Password *string `json:"password,omitempty" yaml:"password,omitempty" mapstructure:"password,omitempty"`

	// If set to `true`: keep repository data between runs instead of deleting the
	// data.
	PersistRepoData bool `json:"persistRepoData,omitempty" yaml:"persistRepoData,omitempty" mapstructure:"persistRepoData,omitempty"`

	// Whether to add digests to Dockerfile source images.
	PinDigests bool `json:"pinDigests,omitempty" yaml:"pinDigests,omitempty" mapstructure:"pinDigests,omitempty"`

	// Platform type of repository.
	Platform ConfigPlatform `json:"platform,omitempty" yaml:"platform,omitempty" mapstructure:"platform,omitempty"`

	// Controls if platform-native auto-merge is used.
	PlatformAutomerge bool `json:"platformAutomerge,omitempty" yaml:"platformAutomerge,omitempty" mapstructure:"platformAutomerge,omitempty"`

	// Use platform API to perform commits instead of using Git directly.
	PlatformCommit ConfigPlatformCommit `json:"platformCommit,omitempty" yaml:"platformCommit,omitempty" mapstructure:"platformCommit,omitempty"`

	// Enable post-update options to be run after package/artifact updating.
	PostUpdateOptions []ConfigPostUpdateOptionsElem `json:"postUpdateOptions,omitempty" yaml:"postUpdateOptions,omitempty" mapstructure:"postUpdateOptions,omitempty"`

	// List of columns to use in PR bodies.
	PrBodyColumns []string `json:"prBodyColumns,omitempty" yaml:"prBodyColumns,omitempty" mapstructure:"prBodyColumns,omitempty"`

	// Table column definitions to use in PR tables.
	PrBodyDefinitions ConfigPrBodyDefinitions `json:"prBodyDefinitions,omitempty" yaml:"prBodyDefinitions,omitempty" mapstructure:"prBodyDefinitions,omitempty"`

	// List of extra notes or templates to include in the Pull Request body.
	PrBodyNotes interface{} `json:"prBodyNotes,omitempty" yaml:"prBodyNotes,omitempty" mapstructure:"prBodyNotes,omitempty"`

	// Pull Request body template. Controls which sections are rendered in the body of
	// the pull request.
	PrBodyTemplate string `json:"prBodyTemplate,omitempty" yaml:"prBodyTemplate,omitempty" mapstructure:"prBodyTemplate,omitempty"`

	// Set the maximum number of commits per Renovate run. By default there is no
	// limit.
	PrCommitsPerRunLimit int `json:"prCommitsPerRunLimit,omitempty" yaml:"prCommitsPerRunLimit,omitempty" mapstructure:"prCommitsPerRunLimit,omitempty"`

	// Limit to a maximum of x concurrent branches/PRs. 0 means no limit.
	PrConcurrentLimit int `json:"prConcurrentLimit,omitempty" yaml:"prConcurrentLimit,omitempty" mapstructure:"prConcurrentLimit,omitempty"`

	// When to create the PR for a branch.
	PrCreation ConfigPrCreation `json:"prCreation,omitempty" yaml:"prCreation,omitempty" mapstructure:"prCreation,omitempty"`

	// Text added here will be placed last in the PR body, with a divider separator
	// before it.
	PrFooter string `json:"prFooter,omitempty" yaml:"prFooter,omitempty" mapstructure:"prFooter,omitempty"`

	// Text added here will be placed first in the PR body.
	PrHeader *string `json:"prHeader,omitempty" yaml:"prHeader,omitempty" mapstructure:"prHeader,omitempty"`

	// Rate limit PRs to maximum x created per hour. 0 means no limit.
	PrHourlyLimit int `json:"prHourlyLimit,omitempty" yaml:"prHourlyLimit,omitempty" mapstructure:"prHourlyLimit,omitempty"`

	// Timeout in hours for when `prCreation=not-pending`.
	PrNotPendingHours int `json:"prNotPendingHours,omitempty" yaml:"prNotPendingHours,omitempty" mapstructure:"prNotPendingHours,omitempty"`

	// Pull Request title template. Inherits from `commitMessage` if null.
	PrTitle *string `json:"prTitle,omitempty" yaml:"prTitle,omitempty" mapstructure:"prTitle,omitempty"`

	// Whether to bypass appending extra context to the Pull Request title.
	PrTitleStrict bool `json:"prTitleStrict,omitempty" yaml:"prTitleStrict,omitempty" mapstructure:"prTitleStrict,omitempty"`

	// Cache resolved presets in package cache.
	PresetCachePersistence bool `json:"presetCachePersistence,omitempty" yaml:"presetCachePersistence,omitempty" mapstructure:"presetCachePersistence,omitempty"`

	// If enabled, Renovate logs the fully resolved config for each repository, plus
	// the fully resolved presets.
	PrintConfig bool `json:"printConfig,omitempty" yaml:"printConfig,omitempty" mapstructure:"printConfig,omitempty"`

	// Server-side private key.
	PrivateKey *string `json:"privateKey,omitempty" yaml:"privateKey,omitempty" mapstructure:"privateKey,omitempty"`

	// Secondary or old private key to try.
	PrivateKeyOld *string `json:"privateKeyOld,omitempty" yaml:"privateKeyOld,omitempty" mapstructure:"privateKeyOld,omitempty"`

	// Path to the Server-side private key.
	PrivateKeyPath *string `json:"privateKeyPath,omitempty" yaml:"privateKeyPath,omitempty" mapstructure:"privateKeyPath,omitempty"`

	// Path to the Server-side old private key.
	PrivateKeyPathOld *string `json:"privateKeyPathOld,omitempty" yaml:"privateKeyPathOld,omitempty" mapstructure:"privateKeyPathOld,omitempty"`

	// Set to `true` to enable branch pruning after automerging.
	PruneBranchAfterAutomerge bool `json:"pruneBranchAfterAutomerge,omitempty" yaml:"pruneBranchAfterAutomerge,omitempty" mapstructure:"pruneBranchAfterAutomerge,omitempty"`

	// Set to `false` to disable pruning stale branches.
	PruneStaleBranches bool `json:"pruneStaleBranches,omitempty" yaml:"pruneStaleBranches,omitempty" mapstructure:"pruneStaleBranches,omitempty"`

	// Determines how to modify or update existing ranges.
	RangeStrategy ConfigRangeStrategy `json:"rangeStrategy,omitempty" yaml:"rangeStrategy,omitempty" mapstructure:"rangeStrategy,omitempty"`

	// Label to request a rebase from Renovate bot.
	RebaseLabel string `json:"rebaseLabel,omitempty" yaml:"rebaseLabel,omitempty" mapstructure:"rebaseLabel,omitempty"`

	// Controls when Renovate rebases an existing branch.
	RebaseWhen ConfigRebaseWhen `json:"rebaseWhen,omitempty" yaml:"rebaseWhen,omitempty" mapstructure:"rebaseWhen,omitempty"`

	// Recreate PRs even if same ones were closed previously.
	RecreateWhen ConfigRecreateWhen `json:"recreateWhen,omitempty" yaml:"recreateWhen,omitempty" mapstructure:"recreateWhen,omitempty"`

	// Key prefix for redis cache entries.
	RedisPrefix *string `json:"redisPrefix,omitempty" yaml:"redisPrefix,omitempty" mapstructure:"redisPrefix,omitempty"`

	// If set, this Redis URL will be used for caching instead of the file system.
	RedisUrl *string `json:"redisUrl,omitempty" yaml:"redisUrl,omitempty" mapstructure:"redisUrl,omitempty"`

	// List of URLs to try for dependency lookup. Package manager specific.
	RegistryUrls []string `json:"registryUrls,omitempty" yaml:"registryUrls,omitempty" mapstructure:"registryUrls,omitempty"`

	// Select whether to perform a direct replacement or alias replacement.
	ReplacementApproach ConfigReplacementApproach `json:"replacementApproach,omitempty" yaml:"replacementApproach,omitempty" mapstructure:"replacementApproach,omitempty"`

	// Path to where the file should be written. In case of `s3` this has to be a full
	// S3 URI.
	ReportPath *string `json:"reportPath,omitempty" yaml:"reportPath,omitempty" mapstructure:"reportPath,omitempty"`

	// Set how, or if, reports should be generated.
	ReportType *ConfigReportType `json:"reportType,omitempty" yaml:"reportType,omitempty" mapstructure:"reportType,omitempty"`

	// List of Repositories.
	Repositories []string `json:"repositories,omitempty" yaml:"repositories,omitempty" mapstructure:"repositories,omitempty"`

	// This option decides if Renovate uses a JSON cache to speed up extractions.
	RepositoryCache ConfigRepositoryCache `json:"repositoryCache,omitempty" yaml:"repositoryCache,omitempty" mapstructure:"repositoryCache,omitempty"`

	// Set the type of renovate repository cache if `repositoryCache` is enabled.
	RepositoryCacheType string `json:"repositoryCacheType,omitempty" yaml:"repositoryCacheType,omitempty" mapstructure:"repositoryCacheType,omitempty"`

	// Controls Renovate's behavior regarding repository config files such as
	// `renovate.json`.
	RequireConfig ConfigRequireConfig `json:"requireConfig,omitempty" yaml:"requireConfig,omitempty" mapstructure:"requireConfig,omitempty"`

	// Ignore versions newer than npm "latest" version.
	RespectLatest bool `json:"respectLatest,omitempty" yaml:"respectLatest,omitempty" mapstructure:"respectLatest,omitempty"`

	// Requested reviewers for Pull Requests (either username or email address
	// depending on the platform).
	Reviewers []string `json:"reviewers,omitempty" yaml:"reviewers,omitempty" mapstructure:"reviewers,omitempty"`

	// Determine reviewers based on configured code owners and changes in PR.
	ReviewersFromCodeOwners bool `json:"reviewersFromCodeOwners,omitempty" yaml:"reviewersFromCodeOwners,omitempty" mapstructure:"reviewersFromCodeOwners,omitempty"`

	// Take a random sample of given size from `reviewers`.
	ReviewersSampleSize *int `json:"reviewersSampleSize,omitempty" yaml:"reviewersSampleSize,omitempty" mapstructure:"reviewersSampleSize,omitempty"`

	// Create PRs to roll back versions if the current version is not found in the
	// registry.
	RollbackPrs bool `json:"rollbackPrs,omitempty" yaml:"rollbackPrs,omitempty" mapstructure:"rollbackPrs,omitempty"`

	// If set, Renovate will use this string as the `endpoint` when creating the AWS
	// S3 client instance.
	S3Endpoint *string `json:"s3Endpoint,omitempty" yaml:"s3Endpoint,omitempty" mapstructure:"s3Endpoint,omitempty"`

	// If set, Renovate will enable `forcePathStyle` when creating the AWS S3 client
	// instance.
	S3PathStyle bool `json:"s3PathStyle,omitempty" yaml:"s3PathStyle,omitempty" mapstructure:"s3PathStyle,omitempty"`

	// Limit branch creation to these times of day or week.
	Schedule interface{} `json:"schedule,omitempty" yaml:"schedule,omitempty" mapstructure:"schedule,omitempty"`

	// Commit scope to use if Semantic Commits are enabled.
	SemanticCommitScope string `json:"semanticCommitScope,omitempty" yaml:"semanticCommitScope,omitempty" mapstructure:"semanticCommitScope,omitempty"`

	// Commit type to use if Semantic Commits is enabled.
	SemanticCommitType string `json:"semanticCommitType,omitempty" yaml:"semanticCommitType,omitempty" mapstructure:"semanticCommitType,omitempty"`

	// Enable Semantic Commit prefixes for commits and PR titles.
	SemanticCommits ConfigSemanticCommits `json:"semanticCommits,omitempty" yaml:"semanticCommits,omitempty" mapstructure:"semanticCommits,omitempty"`

	// If set to `false`, Renovate will upgrade dependencies to their latest release
	// only. Renovate will not separate major or minor branches.
	SeparateMajorMinor bool `json:"separateMajorMinor,omitempty" yaml:"separateMajorMinor,omitempty" mapstructure:"separateMajorMinor,omitempty"`

	// If set to `true`, Renovate will separate `minor` and `patch` updates into
	// separate branches.
	SeparateMinorPatch bool `json:"separateMinorPatch,omitempty" yaml:"separateMinorPatch,omitempty" mapstructure:"separateMinorPatch,omitempty"`

	// If set to `true`, PRs will be raised separately for each available `major`
	// upgrade version.
	SeparateMultipleMajor bool `json:"separateMultipleMajor,omitempty" yaml:"separateMultipleMajor,omitempty" mapstructure:"separateMultipleMajor,omitempty"`

	// If set to `true`, Renovate creates separate PRs for each `minor` stream.
	SeparateMultipleMinor bool `json:"separateMultipleMinor,omitempty" yaml:"separateMultipleMinor,omitempty" mapstructure:"separateMultipleMinor,omitempty"`

	// Skip installing modules/dependencies if lock file updating is possible without
	// a full install.
	SkipInstalls *bool `json:"skipInstalls,omitempty" yaml:"skipInstalls,omitempty" mapstructure:"skipInstalls,omitempty"`

	// Label to make Renovate stop updating a PR.
	StopUpdatingLabel string `json:"stopUpdatingLabel,omitempty" yaml:"stopUpdatingLabel,omitempty" mapstructure:"stopUpdatingLabel,omitempty"`

	// Options to suppress various types of warnings and other notifications.
	SuppressNotifications []ConfigSuppressNotificationsElem `json:"suppressNotifications,omitempty" yaml:"suppressNotifications,omitempty" mapstructure:"suppressNotifications,omitempty"`

	// Must conform to [IANA Time
	// Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) format.
	Timezone *string `json:"timezone,omitempty" yaml:"timezone,omitempty" mapstructure:"timezone,omitempty"`

	// Repository Auth Token.
	Token *string `json:"token,omitempty" yaml:"token,omitempty" mapstructure:"token,omitempty"`

	// Enable or disable Unicode emoji.
	UnicodeEmoji bool `json:"unicodeEmoji,omitempty" yaml:"unicodeEmoji,omitempty" mapstructure:"unicodeEmoji,omitempty"`

	// Whether to update internal dep versions in a monorepo. Works on Yarn
	// Workspaces.
	UpdateInternalDeps bool `json:"updateInternalDeps,omitempty" yaml:"updateInternalDeps,omitempty" mapstructure:"updateInternalDeps,omitempty"`

	// Set to `false` to disable lock file updating.
	UpdateLockFiles bool `json:"updateLockFiles,omitempty" yaml:"updateLockFiles,omitempty" mapstructure:"updateLockFiles,omitempty"`

	// Whether to update branches when not scheduled. Renovate will not create
	// branches outside of the schedule.
	UpdateNotScheduled bool `json:"updateNotScheduled,omitempty" yaml:"updateNotScheduled,omitempty" mapstructure:"updateNotScheduled,omitempty"`

	// Whether to update pinned (single version) dependencies or not.
	UpdatePinnedDependencies bool `json:"updatePinnedDependencies,omitempty" yaml:"updatePinnedDependencies,omitempty" mapstructure:"updatePinnedDependencies,omitempty"`

	// Whether to read configuration from `baseBranches` instead of only the default
	// branch.
	UseBaseBranchConfig ConfigUseBaseBranchConfig `json:"useBaseBranchConfig,omitempty" yaml:"useBaseBranchConfig,omitempty" mapstructure:"useBaseBranchConfig,omitempty"`

	// If `false`, Renovate does not try to access cloud metadata services.
	UseCloudMetadataServices bool `json:"useCloudMetadataServices,omitempty" yaml:"useCloudMetadataServices,omitempty" mapstructure:"useCloudMetadataServices,omitempty"`

	// If set to any string, Renovate will use this as the `user-agent` it sends with
	// HTTP requests.
	UserAgent *string `json:"userAgent,omitempty" yaml:"userAgent,omitempty" mapstructure:"userAgent,omitempty"`

	// User-facing strings for the Renovate comment when a PR is closed.
	UserStrings ConfigUserStrings `json:"userStrings,omitempty" yaml:"userStrings,omitempty" mapstructure:"userStrings,omitempty"`

	// Username for authentication.
	Username *string `json:"username,omitempty" yaml:"username,omitempty" mapstructure:"username,omitempty"`

	// A regex (`re2`) with named capture groups to show how version and compatibility
	// are split from a raw version string.
	VersionCompatibility *string `json:"versionCompatibility,omitempty" yaml:"versionCompatibility,omitempty" mapstructure:"versionCompatibility,omitempty"`

	// Versioning to use for filtering and comparisons.
	Versioning *string `json:"versioning,omitempty" yaml:"versioning,omitempty" mapstructure:"versioning,omitempty"`

	// Writes discovered repositories to a JSON file and then exit.
	WriteDiscoveredRepos *string `json:"writeDiscoveredRepos,omitempty" yaml:"writeDiscoveredRepos,omitempty" mapstructure:"writeDiscoveredRepos,omitempty"`
}

type ConfigAutodiscoverRepoOrder string

const ConfigAutodiscoverRepoOrderAsc ConfigAutodiscoverRepoOrder = "asc"
const ConfigAutodiscoverRepoOrderDesc ConfigAutodiscoverRepoOrder = "desc"

type ConfigAutodiscoverRepoSort string

const ConfigAutodiscoverRepoSortAlpha ConfigAutodiscoverRepoSort = "alpha"
const ConfigAutodiscoverRepoSortCreated ConfigAutodiscoverRepoSort = "created"
const ConfigAutodiscoverRepoSortId ConfigAutodiscoverRepoSort = "id"
const ConfigAutodiscoverRepoSortSize ConfigAutodiscoverRepoSort = "size"
const ConfigAutodiscoverRepoSortUpdated ConfigAutodiscoverRepoSort = "updated"

type ConfigAutomergeStrategy string

const ConfigAutomergeStrategyAuto ConfigAutomergeStrategy = "auto"
const ConfigAutomergeStrategyFastForward ConfigAutomergeStrategy = "fast-forward"
const ConfigAutomergeStrategyMergeCommit ConfigAutomergeStrategy = "merge-commit"
const ConfigAutomergeStrategyRebase ConfigAutomergeStrategy = "rebase"
const ConfigAutomergeStrategySquash ConfigAutomergeStrategy = "squash"

type ConfigAutomergeType string

const ConfigAutomergeTypeBranch ConfigAutomergeType = "branch"
const ConfigAutomergeTypePr ConfigAutomergeType = "pr"
const ConfigAutomergeTypePrComment ConfigAutomergeType = "pr-comment"

type ConfigBinarySource string

const ConfigBinarySourceDocker ConfigBinarySource = "docker"
const ConfigBinarySourceGlobal ConfigBinarySource = "global"
const ConfigBinarySourceHermit ConfigBinarySource = "hermit"
const ConfigBinarySourceInstall ConfigBinarySource = "install"

type ConfigBumpVersion string

const ConfigBumpVersionMajor ConfigBumpVersion = "major"
const ConfigBumpVersionMinor ConfigBumpVersion = "minor"
const ConfigBumpVersionPatch ConfigBumpVersion = "patch"
const ConfigBumpVersionPrerelease ConfigBumpVersion = "prerelease"

type ConfigCommitMessageLowerCase string

const ConfigCommitMessageLowerCaseAuto ConfigCommitMessageLowerCase = "auto"
const ConfigCommitMessageLowerCaseNever ConfigCommitMessageLowerCase = "never"

// Configuration object to define language or manager version constraints.
type ConfigConstraints map[string]string

type ConfigConstraintsFiltering string

const ConfigConstraintsFilteringNone ConfigConstraintsFiltering = "none"
const ConfigConstraintsFilteringStrict ConfigConstraintsFiltering = "strict"

// Customize sections in the Dependency Dashboard issue.
type ConfigCustomizeDashboard map[string]string

type ConfigDependencyDashboardOSVVulnerabilitySummary string

const ConfigDependencyDashboardOSVVulnerabilitySummaryAll ConfigDependencyDashboardOSVVulnerabilitySummary = "all"
const ConfigDependencyDashboardOSVVulnerabilitySummaryNone ConfigDependencyDashboardOSVVulnerabilitySummary = "none"
const ConfigDependencyDashboardOSVVulnerabilitySummaryUnresolved ConfigDependencyDashboardOSVVulnerabilitySummary = "unresolved"

type ConfigDryRun string

const ConfigDryRunExtract ConfigDryRun = "extract"
const ConfigDryRunFull ConfigDryRun = "full"
const ConfigDryRunLookup ConfigDryRun = "lookup"

type ConfigFetchChangeLogs string

const ConfigFetchChangeLogsBranch ConfigFetchChangeLogs = "branch"
const ConfigFetchChangeLogsOff ConfigFetchChangeLogs = "off"
const ConfigFetchChangeLogsPr ConfigFetchChangeLogs = "pr"

type ConfigForkProcessing string

const ConfigForkProcessingAuto ConfigForkProcessing = "auto"
const ConfigForkProcessingDisabled ConfigForkProcessing = "disabled"
const ConfigForkProcessingEnabled ConfigForkProcessing = "enabled"

type ConfigGitUrl string

const ConfigGitUrlDefault ConfigGitUrl = "default"
const ConfigGitUrlEndpoint ConfigGitUrl = "endpoint"
const ConfigGitUrlSsh ConfigGitUrl = "ssh"

type ConfigInternalChecksFilter string

const ConfigInternalChecksFilterFlexible ConfigInternalChecksFilter = "flexible"
const ConfigInternalChecksFilterNone ConfigInternalChecksFilter = "none"
const ConfigInternalChecksFilterStrict ConfigInternalChecksFilter = "strict"

type ConfigMergeConfidenceDatasourcesElem string

const ConfigMergeConfidenceDatasourcesElemGo ConfigMergeConfidenceDatasourcesElem = "go"
const ConfigMergeConfidenceDatasourcesElemMaven ConfigMergeConfidenceDatasourcesElem = "maven"
const ConfigMergeConfidenceDatasourcesElemNpm ConfigMergeConfidenceDatasourcesElem = "npm"
const ConfigMergeConfidenceDatasourcesElemNuget ConfigMergeConfidenceDatasourcesElem = "nuget"
const ConfigMergeConfidenceDatasourcesElemPackagist ConfigMergeConfidenceDatasourcesElem = "packagist"
const ConfigMergeConfidenceDatasourcesElemPypi ConfigMergeConfidenceDatasourcesElem = "pypi"
const ConfigMergeConfidenceDatasourcesElemRubygems ConfigMergeConfidenceDatasourcesElem = "rubygems"

type ConfigMode string

const ConfigModeFull ConfigMode = "full"
const ConfigModeSilent ConfigMode = "silent"

type ConfigOnboardingNoDeps string

const ConfigOnboardingNoDepsAuto ConfigOnboardingNoDeps = "auto"
const ConfigOnboardingNoDepsDisabled ConfigOnboardingNoDeps = "disabled"
const ConfigOnboardingNoDepsEnabled ConfigOnboardingNoDeps = "enabled"

type ConfigPlatform string

const ConfigPlatformAzure ConfigPlatform = "azure"
const ConfigPlatformBitbucket ConfigPlatform = "bitbucket"
const ConfigPlatformBitbucketServer ConfigPlatform = "bitbucket-server"
const ConfigPlatformCodecommit ConfigPlatform = "codecommit"

type ConfigPlatformCommit string

const ConfigPlatformCommitAuto ConfigPlatformCommit = "auto"
const ConfigPlatformCommitDisabled ConfigPlatformCommit = "disabled"
const ConfigPlatformCommitEnabled ConfigPlatformCommit = "enabled"
const ConfigPlatformGerrit ConfigPlatform = "gerrit"
const ConfigPlatformGitea ConfigPlatform = "gitea"
const ConfigPlatformGithub ConfigPlatform = "github"
const ConfigPlatformGitlab ConfigPlatform = "gitlab"
const ConfigPlatformLocal ConfigPlatform = "local"

type ConfigPostUpdateOptionsElem string

const ConfigPostUpdateOptionsElemBundlerConservative ConfigPostUpdateOptionsElem = "bundlerConservative"
const ConfigPostUpdateOptionsElemGomodMassage ConfigPostUpdateOptionsElem = "gomodMassage"
const ConfigPostUpdateOptionsElemGomodSkipVendor ConfigPostUpdateOptionsElem = "gomodSkipVendor"
const ConfigPostUpdateOptionsElemGomodTidy ConfigPostUpdateOptionsElem = "gomodTidy"
const ConfigPostUpdateOptionsElemGomodTidy117 ConfigPostUpdateOptionsElem = "gomodTidy1.17"
const ConfigPostUpdateOptionsElemGomodTidyE ConfigPostUpdateOptionsElem = "gomodTidyE"
const ConfigPostUpdateOptionsElemGomodUpdateImportPaths ConfigPostUpdateOptionsElem = "gomodUpdateImportPaths"
const ConfigPostUpdateOptionsElemGomodVendor ConfigPostUpdateOptionsElem = "gomodVendor"
const ConfigPostUpdateOptionsElemHelmUpdateSubChartArchives ConfigPostUpdateOptionsElem = "helmUpdateSubChartArchives"
const ConfigPostUpdateOptionsElemKustomizeInflateHelmCharts ConfigPostUpdateOptionsElem = "kustomizeInflateHelmCharts"
const ConfigPostUpdateOptionsElemNpmDedupe ConfigPostUpdateOptionsElem = "npmDedupe"
const ConfigPostUpdateOptionsElemPnpmDedupe ConfigPostUpdateOptionsElem = "pnpmDedupe"
const ConfigPostUpdateOptionsElemYarnDedupeFewer ConfigPostUpdateOptionsElem = "yarnDedupeFewer"
const ConfigPostUpdateOptionsElemYarnDedupeHighest ConfigPostUpdateOptionsElem = "yarnDedupeHighest"

// Table column definitions to use in PR tables.
type ConfigPrBodyDefinitions map[string]interface{}

type ConfigPrCreation string

const ConfigPrCreationApproval ConfigPrCreation = "approval"
const ConfigPrCreationImmediate ConfigPrCreation = "immediate"
const ConfigPrCreationNotPending ConfigPrCreation = "not-pending"
const ConfigPrCreationStatusSuccess ConfigPrCreation = "status-success"

type ConfigRangeStrategy string

const ConfigRangeStrategyAuto ConfigRangeStrategy = "auto"
const ConfigRangeStrategyBump ConfigRangeStrategy = "bump"
const ConfigRangeStrategyInRangeOnly ConfigRangeStrategy = "in-range-only"
const ConfigRangeStrategyPin ConfigRangeStrategy = "pin"
const ConfigRangeStrategyReplace ConfigRangeStrategy = "replace"
const ConfigRangeStrategyUpdateLockfile ConfigRangeStrategy = "update-lockfile"
const ConfigRangeStrategyWiden ConfigRangeStrategy = "widen"

type ConfigRebaseWhen string

const ConfigRebaseWhenAuto ConfigRebaseWhen = "auto"
const ConfigRebaseWhenAutomerging ConfigRebaseWhen = "automerging"
const ConfigRebaseWhenBehindBaseBranch ConfigRebaseWhen = "behind-base-branch"
const ConfigRebaseWhenConflicted ConfigRebaseWhen = "conflicted"
const ConfigRebaseWhenNever ConfigRebaseWhen = "never"

type ConfigRecreateWhen string

const ConfigRecreateWhenAlways ConfigRecreateWhen = "always"
const ConfigRecreateWhenAuto ConfigRecreateWhen = "auto"
const ConfigRecreateWhenNever ConfigRecreateWhen = "never"

type ConfigReplacementApproach string

const ConfigReplacementApproachAlias ConfigReplacementApproach = "alias"
const ConfigReplacementApproachReplace ConfigReplacementApproach = "replace"

type ConfigReportType string

const ConfigReportTypeFile ConfigReportType = "file"
const ConfigReportTypeLogging ConfigReportType = "logging"
const ConfigReportTypeS3 ConfigReportType = "s3"

type ConfigRepositoryCache string

const ConfigRepositoryCacheDisabled ConfigRepositoryCache = "disabled"
const ConfigRepositoryCacheEnabled ConfigRepositoryCache = "enabled"
const ConfigRepositoryCacheReset ConfigRepositoryCache = "reset"

type ConfigRequireConfig string

const ConfigRequireConfigIgnored ConfigRequireConfig = "ignored"
const ConfigRequireConfigOptional ConfigRequireConfig = "optional"
const ConfigRequireConfigRequired ConfigRequireConfig = "required"

type ConfigSemanticCommits string

const ConfigSemanticCommitsAuto ConfigSemanticCommits = "auto"
const ConfigSemanticCommitsDisabled ConfigSemanticCommits = "disabled"
const ConfigSemanticCommitsEnabled ConfigSemanticCommits = "enabled"

type ConfigSuppressNotificationsElem string

const ConfigSuppressNotificationsElemArtifactErrors ConfigSuppressNotificationsElem = "artifactErrors"
const ConfigSuppressNotificationsElemBranchAutomergeFailure ConfigSuppressNotificationsElem = "branchAutomergeFailure"
const ConfigSuppressNotificationsElemConfigErrorIssue ConfigSuppressNotificationsElem = "configErrorIssue"
const ConfigSuppressNotificationsElemDependencyLookupWarnings ConfigSuppressNotificationsElem = "dependencyLookupWarnings"
const ConfigSuppressNotificationsElemLockFileErrors ConfigSuppressNotificationsElem = "lockFileErrors"
const ConfigSuppressNotificationsElemMissingCredentialsError ConfigSuppressNotificationsElem = "missingCredentialsError"
const ConfigSuppressNotificationsElemOnboardingClose ConfigSuppressNotificationsElem = "onboardingClose"
const ConfigSuppressNotificationsElemPrEditedNotification ConfigSuppressNotificationsElem = "prEditedNotification"
const ConfigSuppressNotificationsElemPrIgnoreNotification ConfigSuppressNotificationsElem = "prIgnoreNotification"

type ConfigUseBaseBranchConfig string

const ConfigUseBaseBranchConfigMerge ConfigUseBaseBranchConfig = "merge"
const ConfigUseBaseBranchConfigNone ConfigUseBaseBranchConfig = "none"

// User-facing strings for the Renovate comment when a PR is closed.
type ConfigUserStrings map[string]interface{}
